;------------------------------------------------------------------------------
;-         ATMEL Microcontroller Software Support  -  ROUSSET  -
;------------------------------------------------------------------------------
; The software is delivered "AS IS" without warranty or condition of any
; kind, either express, implied or statutory. This includes without
; limitation any warranty or condition with respect to merchantability or
; fitness for any particular purpose, or against the infringements of
; intellectual property rights of others.
;-----------------------------------------------------------------------------
;- File source          : Cstartup.arm
;- Object               : Generic CStartup for GHS and SAM7S256
;- Compilation flag     : None
;-
;- 1.0 16/Mar/05 JPP    : Creation
;- 1.1 01/Apr/05 JPP    : save SPSR 
;------------------------------------------------------------------------------
        .file   "Cstartup.arm"

        .nothumb

#include "atmel/AT91SAM7S256_inc.h"
#include "ISR_Support.h"

;--------------------------------
;- ARM Core Mode and Status Bits
;--------------------------------

ARM_MODE_USER           EQU     0x10
ARM_MODE_FIQ            EQU     0x11
ARM_MODE_IRQ            EQU     0x12
ARM_MODE_SVC            EQU     0x13
ARM_MODE_ABORT          EQU     0x17
ARM_MODE_UNDEF          EQU     0x1B
ARM_MODE_SYS            EQU     0x1F

I_BIT                   EQU     0x80
F_BIT                   EQU     0x40
T_BIT                   EQU     0x20




;------------------------------------------------------------------------------
;- Area Definition
;------------------------------------------------------------------------------

	.weak 	vPortYieldProcessor
	.section ".reset", .text
    	.align  4
;------------------------------------------------------------------------------
;- Exception vectors ( before Remap )
;------------------------------------
;- These vectors can be read at address 0 or at RAM address
;- They ABSOLUTELY requires to be in relative addressing mode in order to
;- guarantee a valid jump. For the moment, all are just looping.
;- If an exception occurs before remap, this would result in an infinite loop.
;- To ensure if a exception occurs before start application to infinite loop.
;------------------------------------------------------------------------------
    	.globl __reset
__reset:
                B           InitReset           ; Reset handler
undefvec:
                B           undefvec            ; Undefined Instruction
swivec:
                B           vPortYieldProcessor     ; Software Interrupt
pabtvec:
                B           pabtvec             ; Prefetch Abort
dabtvec:
                B           dabtvec             ; Data Abort
rsvdvec:
                B           rsvdvec             ; reserved
irqvec:
				LDR         PC, [PC, #-0xF20]	; Jump directly to the address given by the AIC
fiqvec:
;------------------------------------------------------------------------------
;- Function             : FIQ_Handler_Entry
;- Treatments           : FIQ Controller Interrupt Handler.
;- Called Functions     : AIC_FVR[interrupt] 
;------------------------------------------------------------------------------
FIQ_Handler_Entry:

;- Switch in SVC/User Mode to allow User Stack access for C code

;- Save and r0 in FIQ_Register 
            mov         r9,r0
	    ldr         r0 , [r8, #AIC_FVR]

            msr         CPSR_c,#I_BIT | F_BIT | ARM_MODE_SVC

;- Save scratch/used registers and LR in User Stack
            stmfd       sp!, { r1-r3, r12, lr}

;- Branch to the routine pointed by the AIC_FVR
            mov         r14, pc
            bx          r0

;- Restore scratch/used registers and LR from User Stack
            ldmia       sp!, { r1-r3, r12, lr}

;- Leave Interrupts disabled and switch back in FIQ mode
            msr         CPSR_c, #I_BIT | F_BIT | ARM_MODE_FIQ

;- Restore the R0 ARM_MODE_SVC register 
            mov         r0,r9

;- Restore the Program Counter using the LR_fiq directly in the PC
            subs        pc,lr,#4

    .type   __reset,$function
    .size   __reset,.-__reset

;--------------------
;- The reset handler
;--------------------
InitReset:
;------------------------------------------------------------------------------
;- Low level Init (APMC, AIC, EBI, ....) by C function AT91F_LowLevelInit
;------------------------------------------------------------------------------
            .import   AT91F_LowLevelInit
            .import   __ghsbegin_picbase
;- minimum  C initialization

            ldr     r9,= __ghsbegin_picbase
            ldr     r13,=__ghsend_stack         ; temporary stack in iram

            bl      AT91F_LowLevelInit

;------------------------------------------------------------------------------
;- The Reset Handler after Remap
;-------------------------------
;- From here, the code is executed from its link address, ie. 0x100 0000.
;------------------------------------------------------------------------------
InitRemap:

;------------------------------------------------------------------------------
;- Stack Sizes Definition
;------------------------
;- Interrupt Stack requires 2 words x 8 priority level x 4 bytes when using
;- the vectoring. This assume that the IRQ_ENTRY/IRQ_EXIT macro are used.
;- The Interrupt Stack must be adjusted depending on the interrupt handlers.
;- Fast Interrupt not requires stack If in your application it required you must
;- be define here.
;- Other stacks are defined by default to save one word each.
;- The System stack size is not defined and is limited by the free internal
;- SRAM.
;- User stack size is not defined and is limited by the free external SRAM.
;------------------------------------------------------------------------------

IRQ_STACK_SIZE      EQU     0x100		; 2 words per interrupt priority level

;------------------------------------------------------------------------------
;- Top of Stack Definition
;-------------------------
;- Fast Interrupt, Interrupt, Abort, Undefined and Supervisor Stack are located
;- at the top of internal memory in order to speed the exception handling
;- context saving and restoring.
;- User (Application, C) Stack is located at the top of the external memory.
;------------------------------------------------------------------------------

#define TOP_EXCEPTION_STACK (AT91C_SRAM_AFTER_REMAP+AT91C_SRAM_AFTER_REMAP_SIZE)

;------------------------------------------------------------------------------
;- Setup the stack for each mode
;-------------------------------
                ldr     r0, =__ghsend_stack

;- Set up Fast Interrupt Mode and set FIQ Mode Stack
                msr     CPSR_c, #ARM_MODE_FIQ | I_BIT | F_BIT
 ;- Init the FIQ register
		ldr     r8, =AT91C_BASE_AIC
              
;- Set up Interrupt Mode and set IRQ Mode Stack
                msr     CPSR_c, #ARM_MODE_IRQ | I_BIT | F_BIT
                mov     r13, r0                     ; Init stack IRQ
                sub     r0, r0, #IRQ_STACK_SIZE

;- Set up Supervisor Mode and set Supervisor Mode Stack
                msr     CPSR_c, #ARM_MODE_SVC 
                mov     r13, r0                     ; Init stack Undef

;------------------------------------------------------------------------------
;- Branch on C code Main function (with interworking)
;----------------------------------------------------
;- Branch must be performed by an interworking call as either an ARM or Thumb
;- main C function must be supported. This makes the code not position-
;- independent. A Branch with link would generate errors
;------------------------------------------------------------------------------
;- Get Green Hills Linker Values
            .import   _start
            .import   __ghsend_stack
            .import   __ghsbegin_picbase
;- Get Value for Rom/Copy
            .weak     __ghs_rambootcodestart    ; 0 for RAM and Rom/run
            .weak     __ghs_rombootcodestart    ; 0 for RAM and Rom/run
            .weak     __ghs_rombootcodeend      ; 0 for RAM and Rom/run

;- minimum  C initialization
;- Calculate the _start address for different mode RAM or Rom/run or Rom copy
            ldr r1,= __ghs_rombootcodestart
            ldr       r4,= _start

            cmp r1,   r4      ; rombootcodestart < _start ?
            bcs fix
            ldr       r0,= __ghs_rombootcodeend
            cmp       r0, r4      ; rombootcodeend < _start ?
            bcs       done
fix:
            ldr       r0,= __ghs_rambootcodestart
            sub       r4, r4, r0
            add       r4, r4, r1
done:
;-
            mov       r0,0
            mov       r1,r0
            mov       r2,r0
;- Load The Green Hills register
            ldr       r9,= __ghsbegin_picbase
; KALLE     ldr       r13,= __ghsend_stack
;- Branch to _start by interworking
            mov       lr, pc
            bx        r4

;------------------------------------------------------------------------------
;- Loop for ever
;---------------
;- End of application. Normally, never occur.
;- Could jump on Software Reset ( B 0x0 ).
;------------------------------------------------------------------------------
End
            b           End

            .type   InitReset,$function
            .size   InitReset,.-InitReset

;------------------------------------------------------------------------------
;- Function             : IRQ_Handler_Entry
;- Treatments           : IRQ Controller Interrupt Handler.
;- Called Functions     : AIC_IVR[interrupt] 
;------------------------------------------------------------------------------
IRQ_Handler_Entry:

;- Manage Exception Entry
;- Adjust and save LR_irq in IRQ stack
            sub         lr, lr, #4
            stmfd       sp!, {lr}

;- Save SPSR need to be saved for nested interrupt
            mrs         r14, SPSR
            stmfd       sp!, {r14}

;- Save and r0 in IRQ stack
            stmfd       sp!, {r0}

;- Write in the IVR to support Protect Mode
;- No effect in Normal Mode
;- De-assert the NIRQ and clear the source in Protect Mode
            ldr         r14, =AT91C_BASE_AIC
	    ldr         r0 , [r14, #AIC_IVR]
	    str         r14, [r14, #AIC_IVR]

;- Enable Interrupt and Switch in Supervisor Mode
           msr         CPSR_c, #ARM_MODE_SVC

;- Save scratch/used registers and LR in User Stack
            stmfd       sp!, { r1-r3, r12, r14}

;- Branch to the routine pointed by the AIC_IVR
            mov         r14, pc
            bx          r0

;- Restore scratch/used registers and LR from User Stack
            ldmia       sp!, { r1-r3, r12, r14}

;- Disable Interrupt and switch back in IRQ mode
            msr         CPSR_c, #I_BIT | ARM_MODE_IRQ

;- Mark the End of Interrupt on the AIC
            ldr         r14, =AT91C_BASE_AIC
            str         r14, [r14, #AIC_EOICR]

;- Restore r0 from IRQ stack
            ldmia       sp!, {r0}

;- Restore SPSR_irq from IRQ stack
            ldmia       sp!, {r14}

;- Restore adjusted  LR_irq from IRQ stack directly in the PC
            ldmia       sp!, {pc}^

;------------------------------------------------------------------------------
;- Manage exception
;---------------
;- The exception must be ensure in ARM mode
;------------------------------------------------------------------------------
    	.align  4

	.global AT91F_Default_FIQ_handler

AT91F_Default_FIQ_handler
       	b     AT91F_Default_FIQ_handler

        .type   AT91F_Default_FIQ_handler,$function
        .size   AT91F_Default_FIQ_handler,.-AT91F_Default_FIQ_handler

    	.global AT91F_Default_IRQ_handler
AT91F_Default_IRQ_handler
        b     AT91F_Default_IRQ_handler

        .type   AT91F_Default_IRQ_handler,$function
        .size   AT91F_Default_IRQ_handler,.-AT91F_Default_IRQ_handler

	.global AT91F_Spurious_handler
AT91F_Spurious_handler

	portSAVE_CONTEXT			; Save the context of the current task.

	LDR R0, =AT91C_BASE_AIC	; Mark the End of Interrupt on the AIC
   	STR	R0, [R0, #AIC_EOICR]

	portRESTORE_CONTEXT			; Restore the context of the current task -

	
;	b     AT91F_Spurious_handler

	; Push R0 as we are going to use the register. 					
	STMDB	SP!, {R0}

	LDR R0, =AT91C_BASE_AIC	; Mark the End of Interrupt on the AIC
   	STR	R0, [R0, #AIC_EOICR]

	LDMFD	SP!, {R0}

	MOV		PC, LR



    	.type   AT91F_Spurious_handler,$function
    	.size   AT91F_Spurious_handler,.-AT91F_Spurious_handler

    	END

